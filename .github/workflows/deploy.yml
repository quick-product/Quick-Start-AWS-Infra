# deploy-infrastructure.yml.template
# TEMPLATE FILE: Copy this file to .github/workflows/deploy-infrastructure.yml and uncomment to activate
# This workflow is disabled by default - remove the '.template' extension and adjust as needed
# IMPORTANT: See docs/workflow-setup.md for detailed setup instructions, OIDC configuration, and usage

#name: Deploy Infrastructure
#
#on:
#  push:
#    branches: [ main, staging ]
#  pull_request:
#    branches: [ main, staging ]
#
#env:
#  AWS_REGION: us-west-2
#  TERRAFORM_VERSION: 1.5.0
#
#permissions:
#  id-token: write
#  contents: read
#
#jobs:
#  terraform:
#    name: Terraform
#    runs-on: ubuntu-latest
#    environment:
#      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
#    
#    steps:
#    - name: Checkout Repository
#      uses: actions/checkout@v3
#
#    - name: Configure AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v2
#      with:
#        role-to-assume: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ROLE_ARN_PROD || secrets.AWS_ROLE_ARN_STAGING }}
#        aws-region: ${{ env.AWS_REGION }}
#
#    - name: Setup Terraform
#      uses: hashicorp/setup-terraform@v2
#      with:
#        terraform_version: ${{ env.TERRAFORM_VERSION }}
#
#    - name: Terraform Format Check
#      run: terraform fmt -check -recursive
#      working-directory: terraform
#
#    - name: Terraform Init
#      id: init
#      run: |
#        terraform init
#        terraform workspace select ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }} || terraform workspace new ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
#      working-directory: terraform
#
#    - name: Terraform Validate
#      id: validate
#      run: terraform validate
#      working-directory: terraform
#
#    - name: Terraform Plan
#      id: plan
#      if: github.event_name == 'pull_request'
#      run: |
#        terraform plan \
#          -no-color \
#          -input=false
#      working-directory: terraform
#      continue-on-error: true
#
#    - name: Update Pull Request
#      uses: actions/github-script@v6
#      if: github.event_name == 'pull_request'
#      env:
#        PLAN: "${{ steps.plan.outputs.stdout }}"
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        script: |
#          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#
#          <details><summary>Show Plan</summary>
#
#          \`\`\`\n
#          ${process.env.PLAN}
#          \`\`\`
#
#          </details>`;
#
#          github.rest.issues.createComment({
#            issue_number: context.issue.number,
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            body: output
#          })
#
#    - name: Terraform Plan Status
#      if: steps.plan.outcome == 'failure'
#      run: exit 1
#
#    - name: Terraform Apply
#      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
#      run: |
#        terraform apply \
#          -auto-approve \
#          -input=false
#      working-directory: terraform